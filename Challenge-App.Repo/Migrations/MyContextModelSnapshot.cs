// <auto-generated />
using System;
using Challenge_App.Repo;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Challenge_App.Repo.Migrations
{
    [DbContext(typeof(MyContext))]
    partial class MyContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Challenge_App.Data.Challenge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Challenge");
                });

            modelBuilder.Entity("Challenge_App.Data.ChallengeItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChallengeId");

                    b.Property<DateTime>("OnDate");

                    b.HasKey("Id");

                    b.HasIndex("ChallengeId");

                    b.ToTable("ChallengeItem");
                });

            modelBuilder.Entity("Challenge_App.Data.ChallengeItemUsers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChallengeItemId");

                    b.Property<bool>("Completed");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ChallengeItemId");

                    b.HasIndex("UserId");

                    b.ToTable("ChallengeItemUsers");
                });

            modelBuilder.Entity("Challenge_App.Data.ChallengeUsers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChallengeId");

                    b.Property<string>("Role");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ChallengeId");

                    b.HasIndex("UserId");

                    b.ToTable("ChallengeUsers");
                });

            modelBuilder.Entity("Challenge_App.Data.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("PasswordHash");

                    b.Property<byte[]>("PasswordSalt");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Challenge_App.Data.ChallengeItem", b =>
                {
                    b.HasOne("Challenge_App.Data.Challenge", "Challenge")
                        .WithMany("challengeItem")
                        .HasForeignKey("ChallengeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Challenge_App.Data.ChallengeItemUsers", b =>
                {
                    b.HasOne("Challenge_App.Data.ChallengeItem", "ChallengeItem")
                        .WithMany("User")
                        .HasForeignKey("ChallengeItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Challenge_App.Data.User", "User")
                        .WithMany("ChallengeItem")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Challenge_App.Data.ChallengeUsers", b =>
                {
                    b.HasOne("Challenge_App.Data.Challenge", "Challenge")
                        .WithMany("ChallengeUsers")
                        .HasForeignKey("ChallengeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Challenge_App.Data.User", "User")
                        .WithMany("ChallengeUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
